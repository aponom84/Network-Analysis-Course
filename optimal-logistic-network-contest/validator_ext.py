#!python

import argparse
import json
import os

import pandas as pd
from MCF_lib_ext import Solution, logger


def load_data(input_dir):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç reqs.csv, distance_matrix.csv –∏ offices.csv."""
    reqs_path = os.path.join(input_dir, 'reqs.csv')
    matrix_path = os.path.join(input_dir, 'distance_matrix.csv')
    offices_path = os.path.join(input_dir, 'offices.csv')

    if not os.path.exists(reqs_path):
        raise FileNotFoundError(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {reqs_path}")
    if not os.path.exists(matrix_path):
        raise FileNotFoundError(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {matrix_path}")

    logger.info("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫
    df = pd.read_csv(reqs_path)
    df.set_index(['src_office_id', 'dst_office_id'], inplace=True)
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º volume –≤ float
    df['volume'] = df['volume'].astype(float)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç—Ä–∏—Ü—ã —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
    matrix_df = pd.read_csv(matrix_path)
    matrix_df.set_index(['src', 'dst'], inplace=True)
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≤ float
    numeric_cols = ['distance', 'time', 'price_per_km', 'price']
    for col in numeric_cols:
        if col in matrix_df.columns:
            matrix_df[col] = pd.to_numeric(matrix_df[col], errors='coerce')

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ñ–∏—Å–∞—Ö (–ø–µ—Ä–µ–≥—Ä—É–∑–Ω—ã—Ö —É–∑–ª–∞—Ö)
    offices_df = None
    if os.path.exists(offices_path):
        offices_df = pd.read_csv(offices_path)
        offices_df.set_index('office_id', inplace=True)
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        offices_df['transfer_price'] = pd.to_numeric(offices_df['transfer_price'], errors='coerce')
        offices_df['transfer_max'] = pd.to_numeric(offices_df['transfer_max'], errors='coerce')
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(offices_df)} –æ—Ñ–∏—Å–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–µ")
    else:
        logger.warning("‚ö†Ô∏è –§–∞–π–ª offices.csv –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ–≥—Ä—É–∑–∫–∏ –Ω–µ –±—É–¥—É—Ç —É—á—Ç–µ–Ω—ã.")

    return df, matrix_df, offices_df


def load_solution(solution_file):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –∏–∑ JSON –∏–ª–∏ CSV."""
    _, ext = os.path.splitext(solution_file)
    if ext.lower() == '.json':
        with open(solution_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    elif ext.lower() == '.csv':
        # –ï—Å–ª–∏ CSV ‚Äî –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ —ç—Ç–æ paths.csv
        df = pd.read_csv(solution_file)
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ CSV —Å–æ–¥–µ—Ä–∂–∏—Ç: src, dst, volume, path_nodes (–≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏)
        flows = []
        for _, row in df.iterrows():
            try:
                path_nodes = eval(row['path_nodes'])  # –û—Å—Ç–æ—Ä–æ–∂–Ω–æ: —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ–≤–µ—Ä—è–µ—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫—É
                legs = [
                    {"from_office_id": path_nodes[i], "to_office_id": path_nodes[i+1]}
                    for i in range(len(path_nodes)-1)
                ]
                flows.append({
                    "src_office_id": row['src'],
                    "dst_office_id": row['dst'],
                    "avg_day_polybox_qty": row['volume'],
                    "legs": legs
                })
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ –≤ CSV: {e}")
        return {"flows": flows}
    else:
        raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {ext}")


def parse_arguments():
    parser = argparse.ArgumentParser(
        description="–í–∞–ª–∏–¥–∞—Ç–æ—Ä —Ä–µ—à–µ–Ω–∏—è –º–∞–≥–∏—Å—Ç–∞–ª—å–Ω–æ–π –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –≤ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ MCF.\n"
                    "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ —Å—á–∏—Ç–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏:\n"
                    "1. –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è\n"
                    "2. –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –µ–¥–∏–Ω–∏—Ü—ã –æ–±—ä–µ–º–∞ –≥—Ä—É–∑–∞\n"
                    "3. –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏\n"
                    "4. –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –∫—É–±–æ–º–µ—Ç—Ä–∞\n"
                    "5. –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞\n"
                    "6. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–µ—á —Å –∑–∞–≥—Ä—É–∑–∫–æ–π < 50%\n"
                    "7. –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–≥—Ä—É–∑–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —É–∑–ª–æ–≤"
    )
    parser.add_argument('-i', '--input-dir', type=str, required=True,
                        help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å reqs.csv, distance_matrix.csv –∏ offices.csv')
    parser.add_argument('-s', '--solution-file', type=str, required=True,
                        help='–§–∞–π–ª —Ä–µ—à–µ–Ω–∏—è: JSON –∏–ª–∏ CSV (paths.csv)')
    parser.add_argument('--vehicle-capacity', type=float, default=90.0,
                        help='–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¢–° –≤ –º¬≥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 90.0)')
    
    parser.add_argument('--name', type=str, required=True,
                        help='–ò–º—è —Ä–µ—à–µ–Ω–∏—è')
    return parser.parse_args()


def main():
    args = parse_arguments()

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df_tare, matrix_df, offices_df = load_data(args.input_dir)
    solution_data = load_solution(args.solution_file)

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—à–µ–Ω–∏—è
    solution = Solution.load_from_external_format(
        data=solution_data,        
        matrix_df=matrix_df,
        offices_df=offices_df,
        vehicle_capacity=args.vehicle_capacity
    )

    # –í–∞–ª–∏–¥–∞—Ü–∏—è: –≤—Å–µ –ª–∏ –∑–∞—è–≤–∫–∏ —É—á—Ç–µ–Ω—ã?
    non_covered_reqs = solution.validate_coverage(df_tare)
    if non_covered_reqs:
        logger.warning("–ù–µ–ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏:")
        for err in non_covered_reqs:
            logger.warning(f"   {err}")
    else:
        logger.info("‚úÖ –í—Å–µ –∑–∞—è–≤–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É—á—Ç–µ–Ω—ã.")

    # –í—ã–≤–æ–¥ –æ—Ç—á—ë—Ç–∞
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –í–ê–õ–ò–î–ê–¶–ò–ò:")
    print(solution.detailed_report(args.name))


if __name__ == '__main__':
    main()