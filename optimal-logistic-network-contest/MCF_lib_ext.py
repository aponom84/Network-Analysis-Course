import os
import pandas as pd
from collections import defaultdict
import json
import math
import logging


class EmojiHandler(logging.StreamHandler):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —ç–º–æ–¥–∑–∏ –≤–º–µ—Å—Ç–æ —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def emit(self, record):
        # –ó–∞–º–µ–Ω—è–µ–º —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —ç–º–æ–¥–∑–∏
        level_to_emoji = {
            'DEBUG': 'üêõ',
            'INFO': '‚ÑπÔ∏è',
            'WARNING': '‚ö†Ô∏è',
            'ERROR': '‚ùå',
            'CRITICAL': 'üí•'
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        original_levelname = record.levelname
        
        # –ó–∞–º–µ–Ω—è–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞ —ç–º–æ–¥–∑–∏
        record.levelname = level_to_emoji.get(record.levelname, '‚ùì')        
        # –í—ã–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∞
        super().emit(record)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        record.levelname = original_levelname

def setup_logger(name=__name__):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞"""
    logger = logging.getLogger(name)
    logger.setLevel(logging.INFO)
    
    # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    logger.handlers.clear()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    handler = EmojiHandler()
    formatter = logging.Formatter('%(levelname)s %(message)s')
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    
    # –û—Ç–∫–ª—é—á–∞–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É –ª–æ–≥–≥–µ—Ä—É
    logger.propagate = False
    
    return logger

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
logger = setup_logger()

def format_time(seconds):
    days = seconds // (24 * 3600)
    seconds %= (24 * 3600)
    hours = seconds // 3600
    seconds %= 3600
    minutes = seconds // 60
    
    parts = []
    if days > 0:
        parts.append(f"{int(days)} –¥–Ω")
    if hours > 0:
        parts.append(f"{int(hours)} —á")
    if minutes > 0 or not parts:  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω—É—Ç—ã –¥–∞–∂–µ –µ—Å–ª–∏ 0, –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –µ–¥–∏–Ω–∏—Ü
        parts.append(f"{int(minutes)} –º–∏–Ω")
    return " ".join(parts)

class Solution:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ Multi Commodity Flow.

    –°—É—â–Ω–æ—Å—Ç–∏: 
    paths: List[Dist[(Int, Int)]->Dict] 

    paths: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π (–∫–∞–∂–¥—ã–π –ø—É—Ç—å - —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏ 'src', 'dst', 'volume', 'path_nodes')
            vehicle_capacity: –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¢–° (–º¬≥)
    
    transport_legs: Dict([src, dst])- –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö –ø–ª–µ—á–∞—Ö (–æ —Ä—ë–±—Ä–∞—Ö)
      key: (src, dist) ‚Äì –Ω–∞—á–∞–ª–æ –ø–ª–µ—á–∞ –∏ –∫–æ–Ω–µ—Ü –ø–ª–µ—á–∞
      –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ —ç—Ç–æ —Ç–æ–∂–µ —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—è–º–∏:
        vehicles (—á–∏—Å–ª–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤)
        sum_cost ‚Äì –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –≥—Ä—É–∑–∞
        cost_per_km ‚Äì —Ç–∞—Ä–∏—Ñ –¥—è–ª –¥–∞–Ω–Ω–æ–≥–æ (–≤–æ–∑–º–æ–∂–Ω–æ –ª–∏—à–Ω–µ–µ –ø–æ–ª–µ —Ç.–∫. –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –∏–∑ matrix_df)
        distance ‚Äì —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (—Ç–æ–∂–µ –ª–∏—à–Ω—è—è –∏–Ω—Ñ–∞)
        time - —Ç—Ä–µ–±—É–µ–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–æ–µ—Ö–∞—Ç—å –∏–∑ src –≤ dst
        sum_volume: —Å—É–º–º–∞—Ä–Ω—ã–π –æ–±—Å–ª—É–∂–∏–≤–∞–µ–º–π –æ–±—ä—ë–º –≥—Ä—É–∑–∞ –ø–æ –∑–∞—è–≤–∫–∞–º
        reqs: List(Tuple(Int, Int)): —Å–ø–∏—Å–æ–∫ –æ–±—Å—É–∂–∏–≤–∞–µ–º—ã—Ö –∑–∞—è–≤–æ–∫ –≤ –≤–∏–¥–µ –ø–∞—Ä ((src, dst), volume)
    """
    
    def __init__(self, paths, vehicle_capacity=90.0, matrix_df=None, offices_df=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –ª–∏–±–æ paths, –ª–∏–±–æ transport_legs.
        
        Args:
            paths: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π (–∫–∞–∂–¥—ã–π –ø—É—Ç—å - —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏ 'src', 'dst', 'volume', 'path_nodes')
            vehicle_capacity: –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¢–° (–º¬≥)
            matrix_df: DataFrame —Å –º–∞—Ç—Ä–∏—Ü–µ–π —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è, –≤—Ä–µ–º–µ–Ω–∏, –∏ —Ç–∞—Ä–∏—Ñ–æ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –ø—Ä–æ–µ–∑–¥–∞ –∑–∞ –∫–∏–ª–æ–º–µ—Ç—Ä:
            offices_df: DataFrame —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ñ–∏—Å–∞—Ö (–ø–µ—Ä–µ–≥—Ä—É–∑–Ω—ã—Ö —É–∑–ª–∞—Ö)
        """

        self.paths = paths
        self.vehicle_capacity = vehicle_capacity
        self.matrix_df = matrix_df
        self.offices_df = offices_df
        self.transport_legs = self._reconstruct_transport_legs_from_paths()
        self.reqs = self._reconstruct_reqs_from_paths()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏
        self._compute_metrics()
    
    def _reconstruct_reqs_from_paths(self):
        """–í–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ –ø—É—Ç—è–º"""
        reqs = defaultdict(int)
        for path in self.paths:
            volume = path['volume']
            src = path['src']
            dst = path['dst']
            reqs[(src, dst)] = reqs.get( (src, dst), 0) + volume

        return reqs
    
    def _reconstruct_transport_legs_from_paths(self):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç transport_legs –∏–∑ paths."""
        transport_legs = {}

        for path in self.paths:
            path_nodes = path['path_nodes']
            volume = path['volume']
            src = path['src']
            dst = path['dst']

            edges = [(path_nodes[i], path_nodes[i+1]) for i in range(len(path_nodes)-1)]
            
            for (s, t) in edges:
                key = (s, t)
                if key not in transport_legs:
                    try:
                        transport_legs[key] = {
                            'distance': self.matrix_df.loc[s, t]['distance'],
                            'time': self.matrix_df.loc[s, t]['time'],
                            'cost_per_km': self.matrix_df.loc[s, t]['price_per_km'],
                            'sum_volume': 0,
                            'reqs': []
                        }
                    except KeyError:
                        logger.critical(f'–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ matrix_df –¥–ª—è —Ä–µ–±—Ä–∞ {s} ‚Üí {t}')
                        continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ —Ä–µ–±—Ä–æ

                transport_legs[key]['reqs'].append(((src, dst), volume))
                transport_legs[key]['sum_volume'] += volume

        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¢–° –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
        for leg in transport_legs.values():
            leg['vehicles'] = math.ceil(leg['sum_volume'] / self.vehicle_capacity)
            leg['sum_cost'] = leg['vehicles'] * leg['cost_per_km'] * leg['distance'] / 1000.0

        return transport_legs

    def _calculate_transfer_costs(self):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–≥—Ä—É–∑–∞ –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∏—Ç–Ω—ã—Ö —É–∑–ª–æ–≤."""
        total_transfer_cost = 0.0
        transfer_violations = []
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤ —á–µ—Ä–µ–∑ —É–∑–ª—ã
        node_in_flow = defaultdict(float)
        node_out_flow = defaultdict(float)
        
        for path in self.paths:
            path_nodes = path['path_nodes']
            volume = path['volume']
            src = path['src']
            dst = path['dst']
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∏—Ç–Ω—ã–µ —É–∑–ª—ã (–∏—Å–∫–ª—é—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ —Å—Ç–æ–∫)
            transit_nodes = path_nodes[1:-1] if len(path_nodes) > 2 else []
            
            for node in transit_nodes:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–≥—Ä—É–∑–∞
                if self.offices_df is not None and node in self.offices_df.index:
                    transfer_price = self.offices_df.loc[node, 'transfer_price']
                    total_transfer_cost += volume * transfer_price
                
                # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
                node_in_flow[node] += volume
                node_out_flow[node] += volume
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —É–∑–ª–æ–≤
        if self.offices_df is not None:
            for node_id, row in self.offices_df.iterrows():
                transfer_max = row['transfer_max']
                
                if node_id in node_in_flow and node_in_flow[node_id] > transfer_max:
                    transfer_violations.append(
                        f"–£–∑–µ–ª {node_id}: –≤—Ö–æ–¥—è—â–∏–π –ø–æ—Ç–æ–∫ {node_in_flow[node_id]:.2f} > {transfer_max}"
                    )
                
                if node_id in node_out_flow and node_out_flow[node_id] > transfer_max:
                    transfer_violations.append(
                        f"–£–∑–µ–ª {node_id}: –∏—Å—Ö–æ–¥—è—â–∏–π –ø–æ—Ç–æ–∫ {node_out_flow[node_id]:.2f} > {transfer_max}"
                    )
        
        return total_transfer_cost, transfer_violations
    
    def _compute_metrics(self):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ—é—â–∏—Ö—Å—è –¥–∞–Ω–Ω—ã—Ö."""
        # –û–±—â–∏–π –æ–±—ä–µ–º –≥—Ä—É–∑–∞
        self.total_volume = sum(path['volume'] for path in self.paths)
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¢–°
        self.total_vehicles = sum(leg['vehicles'] for leg in self.transport_legs.values())
        
        # –û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è (–º–µ—Ç—Ä—ã)
        self.total_distance = sum(leg['distance'] * leg['vehicles'] for leg in self.transport_legs.values())

        # –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (—Å–µ–∫—É–Ω–¥—ã)
        self.total_time = sum(leg['time'] * leg['vehicles'] for leg in self.transport_legs.values())
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–∑–∫–∏
        self.transport_cost = sum(leg['sum_cost'] for leg in self.transport_legs.values())
        
        # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–≥—Ä—É–∑–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        self.transfer_cost, self.transfer_violations = self._calculate_transfer_costs()
        
        # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (–ø–µ—Ä–µ–≤–æ–∑–∫–∞ + –ø–µ—Ä–µ–≥—Ä—É–∑)
        self.total_cost = self.transport_cost + self.transfer_cost
        
        # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–¥–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.avg_delivery_time_per_req = self.total_time / len(self.reqs.keys()) if self.reqs else 0

        # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–¥–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã –æ–±—ä—ë–º–∞ –≥—Ä—É–∑–∞
        self.avg_delivery_time_per_volume = self.total_time / sum(self.reqs.values()) if sum(self.reqs.values()) > 0 else 0

        self.paths_per_req = len(self.paths) / len(self.reqs.keys()) if self.reqs else 0
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –¢–°
        total_capacity = self.total_vehicles * self.vehicle_capacity
        self.vehicle_utilization = min(
            (self.total_volume / total_capacity * 100) if total_capacity > 0 else 0.0, 100.0
        )

        self.underloaded_legs = self.count_underloaded_legs()
        
        # –°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –∫—É–±–æ–º–µ—Ç—Ä
        self.cost_per_cubic_meter = self.total_cost / self.total_volume if self.total_volume > 0 else float('inf')
    
    def validate_coverage(self, df_tare):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –∑–∞—è–≤–∫–∏ –∏–∑ df_tare —É—á—Ç–µ–Ω—ã –∏ –æ–±—ä—ë–º—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç."""
        actual = defaultdict(float)

        for path in self.paths:
            actual[(path['src'], path['dst'])] += path['volume']

        errors = []
        for (src, dst), exp_vol in df_tare['volume'].items():
            act_vol = actual.get((src, dst), 0)
            if abs(act_vol - exp_vol) > 1e-3:
                errors.append(f"–ó–∞—è–≤–∫–∞ {src}‚Üí{dst}: –æ–∂–∏–¥–∞–ª–æ—Å—å {exp_vol}, –ø–æ–ª—É—á–µ–Ω–æ {act_vol:.2f}")

        return errors

    def count_underloaded_legs(self, threshold=0.3):
        """–°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—ë–±–µ—Ä —Å –∑–∞–≥—Ä—É–∑–∫–æ–π < threshold * vehicle_capacity."""
        count = 0
        for leg in self.transport_legs.values():
            if leg['sum_volume'] < threshold * self.vehicle_capacity:
                count += 1
        return count
    
    def save_to_csv(self, output_dir):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –≤ CSV —Ñ–∞–π–ª—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
        os.makedirs(output_dir, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—É—Ç–µ–π
        if self.paths:
            paths_df = pd.DataFrame(self.paths)
            paths_df.to_csv(os.path.join(output_dir, 'paths.csv'), index=False)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤ (–ø–ª–µ—á)
        if self.transport_legs:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ CSV
            flat_legs = []
            for leg in self.transport_legs.values():
                flat_leg = leg.copy()
                if 'reqs' in flat_leg and flat_leg['reqs']:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è CSV
                    flat_leg['reqs_str'] = '; '.join(
                        [f"{src}->{dst}({vol:.2f})" for (src, dst), vol in flat_leg['reqs']]
                    )
                flat_legs.append(flat_leg)
            
            usage_df = pd.DataFrame(flat_legs)
            usage_df.to_csv(os.path.join(output_dir, 'transport_legs.csv'), index=False)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏
        summary = pd.DataFrame({
            'total_cost': [self.total_cost],
            'transport_cost': [self.transport_cost],
            'transfer_cost': [self.transfer_cost],
            'total_vehicles': [self.total_vehicles],
            'total_distance': [self.total_distance],
            'total_volume': [self.total_volume],
            'vehicle_utilization': [self.vehicle_utilization],
            'cost_per_cubic_meter': [self.cost_per_cubic_meter],
            'avg_delivery_time': [self.avg_delivery_time_per_req],
            'vehicle_capacity': [self.vehicle_capacity]
        })
        summary.to_csv(os.path.join(output_dir, 'summary.csv'), index=False)
    
    @classmethod
    def load_from_csv(cls, input_file_path, vehicle_capacity=90.0, matrix_df=None, offices_df=None):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –∏–∑ CSV —Ñ–∞–π–ª–æ–≤ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""

        paths = []
        if os.path.exists(input_file_path):
            paths_df = pd.read_csv(input_file_path)
            paths = paths_df.to_dict(orient='records')
        else:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è")
                
        return cls(paths=paths, vehicle_capacity=vehicle_capacity, matrix_df=matrix_df, offices_df=offices_df)
    
    def save_to_json(self, output_dir):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –≤ JSON —Ñ–∞–π–ª—ã."""
        os.makedirs(output_dir, exist_ok=True)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è JSON (—É–±–∏—Ä–∞–µ–º –Ω–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã)
        transport_legs_serializable = []
        for leg in self.transport_legs.values():
            serializable_leg = leg.copy()
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º reqs –≤ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            if 'reqs' in serializable_leg:
                serializable_leg['reqs'] = [
                    [(src, dst), vol] for (src, dst), vol in serializable_leg['reqs']
                ]
            transport_legs_serializable.append(serializable_leg)
        
        with open(os.path.join(output_dir, 'solution.json'), 'w') as f:
            json.dump({
                'paths': self.paths,
                'transport_legs': transport_legs_serializable,
                'metadata': {
                    'vehicle_capacity': self.vehicle_capacity,
                    'total_cost': self.total_cost,
                    'transport_cost': self.transport_cost,
                    'transfer_cost': self.transfer_cost,
                    'total_vehicles': self.total_vehicles,
                    'total_distance': self.total_distance,
                    'total_volume': self.total_volume,
                    'vehicle_utilization': self.vehicle_utilization,
                    'cost_per_cubic_meter': self.cost_per_cubic_meter,
                    'avg_delivery_time': self.avg_delivery_time_per_req
                }
            }, f, indent=2, default=str)
    
    @classmethod
    def load_from_json(cls, input_dir, vehicle_capacity=90.0, matrix_df=None, offices_df=None):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –∏–∑ JSON —Ñ–∞–π–ª–∞."""
        json_path = os.path.join(input_dir, 'solution.json')
        if not os.path.exists(json_path):
            raise FileNotFoundError(f"–§–∞–π–ª —Ä–µ—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {json_path}")
        
        with open(json_path, 'r') as f:
            data = json.load(f)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É reqs
        transport_legs = []
        for leg in data['transport_legs']:
            if 'reqs' in leg:
                leg['reqs'] = [((src, dst), vol) for (src, dst), vol in leg['reqs']]
            transport_legs.append(leg)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å
        if data['paths']:
            return cls(paths=data['paths'], vehicle_capacity=vehicle_capacity, matrix_df=matrix_df, offices_df=offices_df)
        else:
            return cls(paths=None, transport_legs=transport_legs, vehicle_capacity=vehicle_capacity, matrix_df=matrix_df, offices_df=offices_df)
        
    @classmethod
    def load_from_external_format(cls, data, matrix_df, offices_df=None, vehicle_capacity=90.0):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, JSON —Å –ø–æ–ª—è–º–∏ src_office_id, dst_office_id, legs).
        
        Args:
            data: dict —Å –∫–ª—é—á–æ–º 'flows' ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
            matrix_df: DataFrame —Å –º–∞—Ç—Ä–∏—Ü–µ–π —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
            offices_df: DataFrame —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ñ–∏—Å–∞—Ö
            vehicle_capacity: –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¢–°
        
        Returns:
            –≠–∫–∑–µ–º–ø–ª—è—Ä Solution
        """
        paths = []

        for flow in data.get('flows', []):
            src = flow['src_office_id']
            dst = flow['dst_office_id']
            volume = flow['avg_day_polybox_qty']  # –∏–ª–∏ –¥—Ä—É–≥–æ–π –æ–±—ä—ë–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å
            legs = flow['legs']

            # –ü—É—Ç—å —É–∑–ª–æ–≤: –Ω–∞—á–∏–Ω–∞–µ–º —Å src, –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ to –∏–∑ legs
            path_nodes = [legs[0]['from_office_id']]
            for leg in legs:
                path_nodes.append(leg['to_office_id'])

            # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –ø—É—Ç—å —Å –∑–∞—è–≤–∫–æ–π?
            if path_nodes[0] != src or path_nodes[-1] != dst:
                raise ValueError(f"–ü—É—Ç—å –¥–ª—è –∑–∞—è–≤–∫–∏ {src}->{dst} –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏–ª–∏ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ: {path_nodes}")

            paths.append({
                'src': src,
                'dst': dst,
                'volume': float(volume),
                'path_nodes': path_nodes
            })

        # –°–æ–∑–¥–∞—ë–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º Solution
        return cls(
            paths=paths,
            vehicle_capacity=vehicle_capacity,
            matrix_df=matrix_df,
            offices_df=offices_df
        )


    def __str__(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è."""
        return (f"Solution - "
                f"Cost: {self.total_cost:.2f}, "
                f"Vehicles: {self.total_vehicles:.1f}, "
                f"Utilization: {self.vehicle_utilization:.1f}%")
    
    
    def detailed_report(self, solution_name=''):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä–µ—à–µ–Ω–∏–∏."""
        report = [
            f"üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä–µ—à–µ–Ω–∏–∏: {solution_name}",
            f"‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {self.total_cost:,.2f} —Ä—É–±.",
            f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–∑–∫–∏: {self.transport_cost:,.2f} —Ä—É–±.",
            f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–≥—Ä—É–∑–∞: {self.transfer_cost:,.2f} —Ä—É–±.",
            f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¢–°: {self.total_vehicles:.0f}",
            f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –¢–°: {self.vehicle_utilization:.1f}%",
            f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–µ—á —Å –∑–∞–≥—Ä—É–∑–∫–æ–π < 30%: {self.underloaded_legs}",
            f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –∫—É–±–æ–º–µ—Ç—Ä: {self.cost_per_cubic_meter:.2f} —Ä—É–±./–º¬≥",
            f"‚Ä¢ –û–±—â–∏–π –æ–±—ä–µ–º –≥—Ä—É–∑–∞: {self.total_volume:,.2f} –º¬≥",
            f"‚Ä¢ –û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {self.total_distance/1000:,.2f} –∫–º",
            f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏: {format_time(self.avg_delivery_time_per_req)}",
            f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–¥–Ω–æ–≥–æ –º¬≥: {format_time(self.avg_delivery_time_per_volume)}",
            f"‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Ç–µ–π: {len(self.paths)}",
            f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Ç–µ–π –Ω–∞ –∑–∞—è–≤–∫—É: {self.paths_per_req:.2f}",
            f"‚Ä¢ –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¢–°: {self.vehicle_capacity} –º¬≥"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–µ—Ä–µ–≥—Ä—É–∑–∞
        if self.transfer_violations:
            report.append("‚ùå –ù–∞—Ä—É—à–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–µ—Ä–µ–≥—Ä—É–∑–∞:")
            for violation in self.transfer_violations:
                report.append(f"   {violation}")
        else:
            report.append("‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∞ —Å–æ–±–ª—é–¥–µ–Ω—ã.")
                
        return "\n".join(report)
